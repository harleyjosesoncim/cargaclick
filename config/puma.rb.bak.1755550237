# config/puma.rb
# Puma config para Rails 6/7 em Docker/Render

require "fileutils"

# Garante pastas de PID/State existam (ambiente ephemeral)
FileUtils.mkdir_p("tmp/pids")
FileUtils.mkdir_p("tmp/sockets")

# Threads
threads_count = Integer(ENV.fetch("RAILS_MAX_THREADS", ENV.fetch("PUMA_THREADS", 5)))
threads threads_count, threads_count

# Ambiente
environment ENV.fetch("RAILS_ENV", "development")

# Porta/Bind (Render injeta PORT; local usa 3000)
port ENV.fetch("PORT", 3000)
bind "tcp://0.0.0.0:#{ENV.fetch('PORT', 3000)}"

# PIDs/State
pidfile "tmp/pids/puma.pid"
state_path "tmp/pids/puma.state"

# Timeout mais alto em dev (útil para turbo/webpackers lentos)
worker_timeout 60 if ENV.fetch("RAILS_ENV", "development") == "development"

# Workers (cluster) — em Render defina WEB_CONCURRENCY (ex.: 2)
workers_count = Integer(ENV.fetch("WEB_CONCURRENCY", 0))
workers workers_count if workers_count > 0

# Preload app (economia de memória com copy-on-write em cluster)
preload_app!

# ActiveRecord: desconecta antes do fork e reconecta no worker
before_fork do
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection_pool.disconnect!
  end
end

on_worker_boot do
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end
end

# Permite `bin/rails restart` em dev
plugin :tmp_restart

# Rackup explícito (evita warnings)
rackup "config.ru"
